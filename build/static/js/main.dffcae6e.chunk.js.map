{"version":3,"sources":["components/Title.js","api/index.js","components/Search.js","components/Preview.js","components/Feature.js","index.js"],"names":["Title","id","BASE_URL","KEY","fetchQueryResultsFromTermAndValue","term","value","a","fetch","encodeURI","split","join","response","json","data","fetchQueryResultsFromURL","url","fetchQueryResults","century","classification","queryString","fetchAllCenturies","localStorage","getItem","JSON","parse","records","setItem","stringify","fetchAllClassifications","Search","setIsLoading","setSearchResults","useState","centuryList","setCenturyList","classificationList","setClassificationList","setQueryString","setCentury","setClassification","useEffect","Promise","all","then","centuries","classifications","catch","console","error","onSubmit","event","preventDefault","results","log","htmlFor","type","placeholder","onChange","target","className","length","name","map","key","Preview","setFeaturedResult","searchResults","info","fetchPage","pageUrl","disabled","prev","onClick","next","record","i","primaryimageurl","src","alt","description","title","Searchable","searchTerm","searchValue","href","Feature","props","featuredResult","dated","culture","style","technique","medium","dimensions","people","person","alphasort","displaydate","department","division","contact","creditline","images","index","baseimageurl","App","setSearchResult","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dffcae6e.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Title = () => {\n    return(\n        <div id=\"title\">\n        <h1>\n            The Art Collector\n        </h1>\n        <h5>\n            Search the Harvard Art Museums' Private Collections\n        </h5>\n        </div>\n    )\n}\n\nexport default Title;\n","/**\n * This file features and exports all of your calls to the API\n * \n * You need to replace YOUR_API_KEY in the string associated with KEY with your actual API key\n */\nexport const BASE_URL = 'https://api.harvardartmuseums.org';\nexport const KEY = 'apikey=28473b86-ecfe-4f76-be07-c1fe2d6e13d3'\n// export const KEY = `apikey=${process.env.API_KEY}`;\n\n\n/**\n * This will make a call to the API for a single term and value (e.g. \"person\", and \"unknown\"), and return the result\n */\nexport async function fetchQueryResultsFromTermAndValue(term, value) {\n  try {\n    const response = await fetch(`${ BASE_URL }/object?${ KEY }&${ term }=${ encodeURI(value.split('-').join('|')) }`);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This will make a call to the API for a preformed url (useful for previous and next buttons), and return the result\n */\nexport async function fetchQueryResultsFromURL(url) {\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * Requires an object { century: '', classification: '', queryString: '' } to be passed in as an argument\n * \n * Then makes a call to the API, and returns the first page of results\n */\nexport async function fetchQueryResults({\n  century,\n  classification,\n  queryString,\n}) {\n  const url = `${ BASE_URL }/object?${ KEY }&classification=${ classification }&century=${ \n    century }&keyword=${ queryString }`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are centuries stored in localStorage, or fetches them from the API and stores them in localStorage if not\n */\nexport async function fetchAllCenturies() {\n  if (localStorage.getItem('centuries')) {\n    return JSON.parse(localStorage.getItem('centuries'));\n  }\n\n  const url = `${ BASE_URL }/century?${ KEY }&size=100&sort=temporalorder`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem('centuries', JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are classifications stored in localStorage, or fetches them from the API and stores them in localStorage if not \n */\nexport async function fetchAllClassifications() {\n  if (localStorage.getItem('classifications')) {\n    return JSON.parse(localStorage.getItem('classifications'));\n  }\n\n  const url = `${ BASE_URL }/classification?${ KEY }&size=100&sort=name`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem('classifications', JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}","import React, { useEffect, useState } from \"react\";\n\n/**\n * Don't touch these imports!\n */\nimport {\n  fetchAllCenturies,\n  fetchAllClassifications,\n  fetchQueryResults,\n} from \"../api\";\n\nconst Search = ({ setIsLoading, setSearchResults }) => {\n  // We are at the Search component, a child of app. This has a form, so we need to use useState\n\n  const [centuryList, setCenturyList] = useState([]);\n\n  const [classificationList, setClassificationList] = useState([]);\n\n  const [queryString, setQueryString] = useState(\"\");\n\n  const [century, setCentury] = useState(\"any\");\n\n  const [classification, setClassification] = useState(\"any\");\n\n  /**\n   * Inside of useEffect, use Promise.all([]) with fetchAllCenturies and fetchAllClassifications\n   *\n   * In the .then() callback pass the returned lists to setCenturyList and setClassificationList\n   *\n   * Make sure to console.error on caught errors from the API methods.\n   */\n  useEffect(() => {\n    Promise.all([fetchAllCenturies(), fetchAllClassifications()])\n      .then(([centuries, classifications]) => {\n        setCenturyList(centuries);\n\n        setClassificationList(classifications);\n      })\n      .catch(console.error);\n  }, []);\n\n  /**\n   * This is a form element, so we need to bind an onSubmit handler to it which:\n   *\n   * calls event.preventDefault()\n   * calls setIsLoading, set it to true\n   *\n   * then, in a try/catch/finally block:\n   *\n   * try to:\n   * - get the results from fetchQueryResults({ century, classification, queryString })\n   * - pass them to setSearchResults\n   *\n   * catch: error to console.error\n   *\n   * finally: call setIsLoading, set it to false\n   */\n  return (\n    <form\n      id=\"search\"\n      onSubmit={async (event) => {\n        event.preventDefault();\n        setIsLoading(true);\n        try {\n          const results = await fetchQueryResults({\n            century,\n            classification,\n            queryString,\n          });\n\n          setSearchResults(results);\n        } catch (error) {\n          console.log(\"Error\");\n        } finally {\n          setIsLoading(false);\n        }\n      }}\n    >\n      <fieldset>\n        <label htmlFor=\"keywords\">Query</label>\n        <input\n          id=\"keywords\"\n          type=\"text\"\n          placeholder=\"enter keywords...\"\n          value={queryString}\n          onChange={(event) => setQueryString(event.target.value)}\n        />\n      </fieldset>\n      <fieldset>\n        <label htmlFor=\"select-classification\">\n          Classification{\" \"}\n          <span className=\"classification-count\">\n            ({classificationList.length})\n          </span>\n        </label>\n        <select\n          name=\"classification\"\n          id=\"select-classification\"\n          value={classification}\n          onChange={(event) => setClassification(event.target.value)}\n        >\n          <option value=\"any\">Any</option>\n          {classificationList.map((classification) => {\n            return (\n              <option key={classification.id} value={classification.name}>\n                {classification.name}\n              </option>\n            );\n          })}\n        </select>\n      </fieldset>\n      <fieldset>\n        <label htmlFor=\"select-century\">\n          Century <span className=\"century-count\">({centuryList.length})</span>\n        </label>\n        <select\n          name=\"century\"\n          id=\"select-century\"\n          value={century}\n          onChange={(event) => setCentury(event.target.value)}\n        >\n          <option value=\"any\">Any</option>\n          {centuryList.map((century) => {\n            return (\n              <option key={century.id} value={century.name}>\n                {century.name}\n              </option>\n            );\n          })}\n        </select>\n      </fieldset>\n      <button type=\"submit\">SEARCH</button>\n    </form>\n  );\n};\n\nexport default Search;\n","import React, { useState } from \"react\";\n\n/**\n * We need to import fetchQueryResultsFromURL since we will sometimes have urls in info.prev and info.next\n * which are query urls.\n */\nimport { fetchQueryResultsFromURL } from \"../api\";\n\nconst Preview = ({\n  setSearchResults,\n  setFeaturedResult,\n  setIsLoading,\n  searchResults,\n}) => {\n  /**\n   * Destructure setSearchResults, setFeaturedResult, and setIsLoading from props\n   * and also destructure info and records from props.searchResults\n   *\n   \n\n   * You need info, records, setSearchResults, setFeaturedResult, and setIsLoading as available constants\n   */\n  const { info, records } = searchResults;\n  const featuredResult = setFeaturedResult;\n  const isLoading = setIsLoading;\n\n  /**\n   * Don't touch this function, it's good to go.\n   *\n   * It has to be defined inside the Preview component to have access to setIsLoading, setSearchResults, etc...\n   */\n  async function fetchPage(pageUrl) {\n    setIsLoading(true);\n\n    try {\n      const results = await fetchQueryResultsFromURL(pageUrl);\n      setSearchResults(results);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  return (\n    <aside id=\"preview\">\n      <header className=\"pagination\">\n        {/* This button should be disabled if nothing is set in info.prev, and should call fetchPage with info.prev when clicked */}\n        <button\n          disabled={!info.prev}\n          className=\"previous\"\n          onClick={(event) => {\n            fetchPage(info.prev);\n          }}\n        >\n          Previous\n        </button>\n        {/* This button should be disabled if nothing is set in info.next, and should call fetchPage with info.next when clicked */}\n        <button\n          disabled={!info.next}\n          className=\"next\"\n          onClick={(event) => {\n            fetchPage(info.next);\n          }}\n        >\n          Next\n        </button>\n      </header>\n      <section className=\"results\">\n        {records.map((record, i) => {\n          return (\n            <div\n              key={i}\n              className=\"object-preview\"\n              onClick={(event) => {\n                event.preventDefault();\n                // set the featured result to be this record, using setFeaturedResult\n                setFeaturedResult(record);\n              }}\n            >\n              {\n                // if the record.primaryimageurl exists, show this: <img src={ record.primaryimageurl } alt={ record.description } />, otherwise show nothing\n                record.primaryimageurl ? (\n                  <img src={record.primaryimageurl} alt={record.description} />\n                ) : null\n              }\n              {\n                // if the record.title exists, add this: <h3>{ record.title }</h3>, otherwise show this: <h3>MISSING INFO</h3>\n                record.title ? <h3>{record.title}</h3> : <h3>MISSING INFO</h3>\n              }\n            </div>\n          );\n        })}\n      </section>\n    </aside>\n  );\n};\n\nexport default Preview;\n","import React, { Fragment, useState, useEffect } from \"react\";\n\n// Don't touch this import\nimport { fetchQueryResultsFromTermAndValue } from \"../api\";\n\n/**\n * We need a new component called Searchable which:\n *\n * Has a template like this:\n *\n * <span className=\"content\">\n *  <a href=\"#\" onClick={async (event) => {}}>SOME SEARCH TERM</a>\n * </span>\n *\n * You'll need to read searchTerm, searchValue, setIsLoading, and setSearchResults off of the props.\n *\n * When someone clicks the anchor tag, you should:\n *\n * - preventDefault on the event\n * - call setIsLoading, set it to true\n *\n * Then start a try/catch/finally block:\n *\n * try:\n *  - await the result of fetchQueryResultsFromTermAndValue, passing in searchTerm and searchValue\n *  - send the result to setSearchResults (which will update the Preview component)\n * catch:\n *  - console.error the error\n * finally:\n *  - call setIsLoading, set it to false\n */\nconst Searchable = ({\n  searchTerm,\n  searchValue,\n  setIsLoading,\n  setSearchResults,\n}) => {\n  return (\n    <Fragment>\n      <span className=\"title\">{`${searchTerm}`}</span>\n      <span className=\"content\">\n        <a\n          href=\"#\"\n          onClick={async (event) => {\n            event.preventDefault();\n            setIsLoading(true);\n            try {\n              const results = await fetchQueryResultsFromTermAndValue(\n                searchTerm,\n                searchValue\n              );\n              setSearchResults(results);\n            } catch (error) {\n              console.log(\"ERROR\");\n            } finally {\n              setIsLoading(false);\n            }\n          }}\n        >\n          {`${searchValue}`}\n        </a>\n      </span>\n    </Fragment>\n  );\n};\n\n/**\n * We need a new component called Feature which looks like this when no featuredResult is passed in as a prop:\n *\n * <main id=\"feature\"></main>\n *\n * And like this when one is:\n *\n * <main id=\"feature\">\n *   <div className=\"object-feature\">\n *     <header>\n *       <h3>OBJECT TITLE</h3>\n *       <h4>WHEN IT IS DATED</h4>\n *     </header>\n *     <section className=\"facts\">\n *       <span className=\"title\">FACT NAME</span>\n *       <span className=\"content\">FACT VALUE</span>\n *       <span className=\"title\">NEXT FACT NAME</span>\n *       <span className=\"content\">NEXT FACT VALUE</span>\n *     </section>\n *     <section className=\"photos\">\n *       <img src=IMAGE_URL alt=SOMETHING_WORTHWHILE />\n *     </section>\n *   </div>\n * </main>\n *\n * The different facts look like this: title, dated, images, primaryimageurl, description, culture, style,\n * technique, medium, dimensions, people, department, division, contact, creditline\n *\n * The <Searchable /> ones are: culture, technique, medium (first toLowerCase it), and person.displayname (one for each PEOPLE)\n *\n * NOTE: people and images are likely to be arrays, and will need to be mapped over if they exist\n *\n * This component should be exported as default.\n */\nconst Feature = (props) => {\n  const { featuredResult, setIsLoading, setSearchResults } = props;\n\n  return !featuredResult ? (\n    <main id=\"feature\"></main>\n  ) : (\n    <main id=\"feature\">\n      <div className=\"object-feature\">\n        <header>\n          <h3>{`${featuredResult.title}`}</h3>\n          <h4>{`${featuredResult.dated}`}</h4>\n        </header>\n        <section className=\"facts\">\n          {featuredResult.description ? (\n            <Fragment>\n              <span className=\"title\">description</span>\n              <span className=\"content\">{`${featuredResult.description}`}</span>\n            </Fragment>\n          ) : null}\n\n          {featuredResult.culture ? (\n            <Searchable\n              searchTerm=\"Culture\"\n              searchValue={featuredResult.culture}\n              setIsLoading={setIsLoading}\n              setSearchResults={setSearchResults}\n            />\n          ) : null}\n\n          {featuredResult.style ? (\n            <Fragment>\n              <span className=\"title\">Style</span>\n              <span className=\"content\">{`${featuredResult.style}`}</span>\n            </Fragment>\n          ) : null}\n\n          {featuredResult.technique ? (\n            <Searchable\n              searchTerm=\"Technique\"\n              searchValue={featuredResult.technique}\n              setIsLoading={setIsLoading}\n              setSearchResults={setSearchResults}\n            />\n          ) : null}\n\n          {featuredResult.medium ? (\n            <Searchable\n              searchTerm=\"Medium\"\n              searchValue={featuredResult.medium}\n              setIsLoading={setIsLoading}\n              setSearchResults={setSearchResults}\n            />\n          ) : null}\n\n          {featuredResult.dimensions ? (\n            <Fragment>\n              <span className=\"title\">Dimensions</span>\n              <span className=\"content\">{`${featuredResult.dimensions}`}</span>\n            </Fragment>\n          ) : null}\n\n          {featuredResult.people ? <span className=\"title\">People</span> : null}\n          {featuredResult.people\n            ? featuredResult.people.map((person, i) => {\n                return (\n                  <div key={i} className=\"content\">{`${person.alphasort} (${\n                    person.displaydate ? person.displaydate : \"unknown\"\n                  })`}</div>\n                );\n              })\n            : null}\n\n          {featuredResult.department ? (\n            <Fragment>\n              <span className=\"title\">Department</span>\n              <span className=\"content\">{`${featuredResult.department}`}</span>\n            </Fragment>\n          ) : null}\n\n          {featuredResult.division ? (\n            <Fragment>\n              <span className=\"title\">Division</span>\n              <span className=\"content\">{`${featuredResult.division}`}</span>\n            </Fragment>\n          ) : null}\n\n          {featuredResult.contact ? (\n            <Fragment>\n              <span className=\"title\">Contact</span>\n              <span className=\"content\">{`${featuredResult.contact}`}</span>\n            </Fragment>\n          ) : null}\n\n          {featuredResult.creditline ? (\n            <Fragment>\n              <span className=\"title\">Credit line</span>\n              <span className=\"content\">{`${featuredResult.creditline}`}</span>\n            </Fragment>\n          ) : null}\n        </section>\n\n        <section className=\"photos\">\n          {featuredResult.images && featuredResult.images.length > 0 ? (\n            featuredResult.images.map((props, index) => {\n              return (\n                <img\n                  key={index}\n                  src={props.baseimageurl}\n                  alt={props.title}\n                ></img>\n              );\n            })\n          ) : (\n            <h1>Nothing to display</h1>\n          )}\n        </section>\n      </div>\n    </main>\n  );\n};\n\nexport default Feature;\n","import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\n\n//These imports won't work until you fix ./components/index.js\nimport { Feature, Loading, Preview, Search, Title } from \"./components\";\n\nconst App = () => {\n  //We are at the App level component, which is top-most. Any state which needs to be shared between immediate children should\n  //be made here, so create state pairs using useState() for:\n\n  const [searchResults, setSearchResults] = useState({ info: {}, records: [] });\n\n  const [featuredResult, setFeaturedResult] = useState(null);\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  return (\n    <div className=\"app\">\n      <Title />\n      {/* <Search /> needs props for setIsLoading and setSearchResults (trigger <Loading /> on search start/end, and transfer results to preview) */}\n      <Search setIsLoading={setIsLoading} setSearchResults={setSearchResults} />\n      {/* <Preview /> needs props for searchResults, setIsLoading and setSearchResults (clicking prev/next buttons), and setFeaturedResult (clicking a preview) */}\n      <Preview\n        searchResults={searchResults}\n        setIsLoading={setIsLoading}\n        setSearchResults={setSearchResults}\n        setFeaturedResult={setFeaturedResult}\n      />\n      {/* <Feature /> needs props for featuredResult, as well as setIsLoading and setSearchResults (clicking on searchable properties) */}\n      <Feature\n        featuredResult={featuredResult}\n        setIsLoading={setIsLoading}\n        setSearchResult={setSearchResults}\n      />\n      {/* <Loading /> is static, but should only render when isLoading is true */}\n      {/* <Loading /> use a ternary and render null if isLoading is false */}\n    </div>\n  );\n};\n\n/**\n * Bootstrap the <App /> component into the '#app' element in the DOM,\n * using ReactDOM.render();\n */\nReactDOM.render(<App />, document.getElementById(\"app\"));\n"],"sourceRoot":""}